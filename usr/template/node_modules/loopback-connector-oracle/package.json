{
  "name": "loopback-connector-oracle",
  "version": "1.1.0",
  "description": "Loopback Oracle Connector",
  "keywords": [
    "StrongLoop",
    "LoopBack",
    "Oracle",
    "DataSource",
    "Connector"
  ],
  "main": "index.js",
  "scripts": {
    "test": "./run-tests",
    "coverage": "mocha -r blanket -R html-cov > coverage_loopback-connector-oracle.html"
  },
  "dependencies": {
    "loopback-datasource-juggler": "~1.1.0",
    "loopback-oracle-installer": "~1.0.0",
    "async": "~0.2.9"
  },
  "config": {
    "oracleUrl": "http://7e9918db41dd01dbf98e-ec15952f71452bc0809d79c86f5751b6.r22.cf1.rackcdn.com"
  },
  "devDependencies": {
    "should": "~1.2.2",
    "mocha": "~1.12.1",
    "blanket": "~1.1.5",
    "rc": "~0.3.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/loopback-connector-oracle.git"
  },
  "license": "StrongLoop",
  "readme": "## loopback-connector-oracle\n\nThe Oracle Connector module for for [loopback-datasource-juggler](http://docs.strongloop.com/loopback-datasource-juggler/).\n\n## Installation\n\nTo simplify the installation of [node-oracle](https://github.com/strongloop/node-oracle) module and Oracle instant clients,\nwe introduce [loopback-oracle-installer](https://github.com/strongloop/loopback-oracle-installer) as a dependency which installs\nand configures node-oracle upon `npm install`.\n\nPlease note `config.oracleUrl` is the property to define the base URL to download the corresponding node-oracle bundle for the local\nenvironment.\n\nThe bundle file name is `loopback-oracle-<platform>-<arch>-<version>.tar.gz`. The `version` is the same as the `version` in package.json.\n\n    \"dependencies\": {\n        \"loopback-oracle-installer\": \"git+ssh://git@github.com:strongloop/loopback-oracle-installer.git\",\n             ...\n    },\n    \"config\": {\n        \"oracleUrl\": \"http://7e9918db41dd01dbf98e-ec15952f71452bc0809d79c86f5751b6.r22.cf1.rackcdn.com\"\n    },\n\n**The `oracleUrl` can be overridden via LOOPBACK_ORACLE_URL environment variable.**\n\nFor MacOSX, the full URL is:\n\nhttp://7e9918db41dd01dbf98e-ec15952f71452bc0809d79c86f5751b6.r22.cf1.rackcdn.com/loopback-oracle-MacOSX-x64-0.0.1.tar.gz\n\n`libaio` library is required on Linux systems:\n\n* On Unbuntu/Debian\n\n        ﻿sudo apt-get install libaio1\n\n* On Fedora/CentOS/RHEL\n\n        ﻿sudo yum install libaio\n\n\n**Please make sure c:\\instantclient_12_1\\vc10 comes before c:\\instantclient_12_1**\n\n## Connector settings\n\nThe connector can be configured using the following settings from the data source.\n\n* host or hostname (default to 'localhost'): The host name or ip address of the Oracle DB server\n* port (default to 1521): The port number of the Oracle DB server\n* username or user: The user name to connect to the Oracle DB\n* password: The password\n* database (default to 'XE'): The Oracle DB listener name\n* debug (default to false)\n\n## Discovering Models\n\nOracle data sources allow you to discover model definition information from existing oracle databases. See the following APIs:\n\n - [dataSource.discoverModelDefinitions([username], fn)](https://github.com/strongloop/loopback#datasourcediscovermodeldefinitionsusername-fn)\n - [dataSource.discoverSchema([owner], name, fn)](https://github.com/strongloop/loopback#datasourcediscoverschemaowner-name-fn)\n\n### Asynchronous APIs for discovery\n\n* Oracle.prototype.discoverModelDefinitions = function (options, cb)\n  - options:\n    - all: {Boolean} To include tables/views from all schemas/owners\n    - owner/schema: {String} The schema/owner name\n    - views: {Boolean} To include views\n  - cb:\n    - Get a list of table/view names, for example:\n\n        {type: 'table', name: 'INVENTORY', owner: 'STRONGLOOP' }\n        {type: 'table', name: 'LOCATION', owner: 'STRONGLOOP' }\n        {type: 'view', name: 'INVENTORY_VIEW', owner: 'STRONGLOOP' }\n\n\n* Oracle.prototype.discoverModelProperties = function (table, options, cb)\n  - table: {String} The name of a table or view\n  - options:\n    - owner/schema: {String} The schema/owner name\n  - cb:\n    - Get a list of model property definitions, for example:\n\n          { owner: 'STRONGLOOP',\n            tableName: 'PRODUCT',\n            columnName: 'ID',\n            dataType: 'VARCHAR2',\n            dataLength: 20,\n            nullable: 'N',\n            type: 'String' }\n          { owner: 'STRONGLOOP',\n            tableName: 'PRODUCT',\n            columnName: 'NAME',\n            dataType: 'VARCHAR2',\n            dataLength: 64,\n            nullable: 'Y',\n            type: 'String' }\n\n\n* Oracle.prototype.discoverPrimaryKeys= function(table, options, cb)\n  - table: {String} The name of a table or view\n  - options:\n    - owner/schema: {String} The schema/owner name\n  - cb:\n    - Get a list of primary key definitions, for example:\n\n        { owner: 'STRONGLOOP',\n          tableName: 'INVENTORY',\n          columnName: 'PRODUCT_ID',\n          keySeq: 1,\n          pkName: 'ID_PK' }\n        { owner: 'STRONGLOOP',\n          tableName: 'INVENTORY',\n          columnName: 'LOCATION_ID',\n          keySeq: 2,\n          pkName: 'ID_PK' }\n\n* Oracle.prototype.discoverForeignKeys= function(table, options, cb)\n  - table: {String} The name of a table or view\n  - options:\n    - owner/schema: {String} The schema/owner name\n  - cb:\n    - Get a list of foreign key definitions, for example:\n\n        { fkOwner: 'STRONGLOOP',\n          fkName: 'PRODUCT_FK',\n          fkTableName: 'INVENTORY',\n          fkColumnName: 'PRODUCT_ID',\n          keySeq: 1,\n          pkOwner: 'STRONGLOOP',\n          pkName: 'PRODUCT_PK',\n          pkTableName: 'PRODUCT',\n          pkColumnName: 'ID' }\n\n\n* Oracle.prototype.discoverExportedForeignKeys= function(table, options, cb)\n\n  - table: {String} The name of a table or view\n  - options:\n    - owner/schema: {String} The schema/owner name\n  - cb:\n    - Get a list of foreign key definitions that reference the primary key of the given table, for example:\n\n        { fkName: 'PRODUCT_FK',\n          fkOwner: 'STRONGLOOP',\n          fkTableName: 'INVENTORY',\n          fkColumnName: 'PRODUCT_ID',\n          keySeq: 1,\n          pkName: 'PRODUCT_PK',\n          pkOwner: 'STRONGLOOP',\n          pkTableName: 'PRODUCT',\n          pkColumnName: 'ID' }\n\n\n### Synchronous APIs for discovery\n\n* Oracle.prototype.discoverModelDefinitionsSync = function (options)\n* Oracle.prototype.discoverModelPropertiesSync = function (table, options)\n* Oracle.prototype.discoverPrimaryKeysSync= function(table, options)\n* Oracle.prototype.discoverForeignKeysSync= function(table, options)\n* Oracle.prototype.discoverExportedForeignKeysSync= function(table, options)\n\n### Discover/build/try the models\n\nThe following example uses `discoverAndBuildModels` to discover, build and try the models:\n\n    dataSource.discoverAndBuildModels('INVENTORY', { owner: 'STRONGLOOP', visited: {}, associations: true},\n         function (err, models) {\n            // Show records from the models\n            for(var m in models) {\n                models[m].all(show);\n            };\n\n            // Find one record for inventory\n            models.Inventory.findOne({}, function(err, inv) {\n                console.log(\"\\nInventory: \", inv);\n                // Follow the foreign key to navigate to the product\n                inv.product(function(err, prod) {\n                    console.log(\"\\nProduct: \", prod);\n                    console.log(\"\\n ------------- \");\n                });\n        });\n    }\n\n## Model definition for Oracle\n\nThe model definition consists of the following properties:\n\n* name: Name of the model, by default, it's the camel case of the table\n* options: Model level operations and mapping to Oracle schema/table\n* properties: Property definitions, including mapping to Oracle column\n\n        {\n          \"name\":\"Inventory\",\n          \"options\":{\n            \"idInjection\":false,\n            \"oracle\":{\n              \"schema\":\"STRONGLOOP\",\n              \"table\":\"INVENTORY\"\n            }\n          },\n          \"properties\":{\n            \"productId\":{\n              \"type\":\"String\",\n              \"required\":true,\n              \"length\":20,\n              \"id\":1,\n              \"oracle\":{\n                \"columnName\":\"PRODUCT_ID\",\n                \"dataType\":\"VARCHAR2\",\n                \"dataLength\":20,\n                \"nullable\":\"N\"\n              }\n            },\n            \"locationId\":{\n              \"type\":\"String\",\n              \"required\":true,\n              \"length\":20,\n              \"id\":2,\n              \"oracle\":{\n                \"columnName\":\"LOCATION_ID\",\n                \"dataType\":\"VARCHAR2\",\n                \"dataLength\":20,\n                \"nullable\":\"N\"\n              }\n            },\n            \"available\":{\n              \"type\":\"Number\",\n              \"required\":false,\n              \"length\":22,\n              \"oracle\":{\n                \"columnName\":\"AVAILABLE\",\n                \"dataType\":\"NUMBER\",\n                \"dataLength\":22,\n                \"nullable\":\"Y\"\n              }\n            },\n            \"total\":{\n              \"type\":\"Number\",\n              \"required\":false,\n              \"length\":22,\n              \"oracle\":{\n                \"columnName\":\"TOTAL\",\n                \"dataType\":\"NUMBER\",\n                \"dataLength\":22,\n                \"nullable\":\"Y\"\n              }\n            }\n          }\n        }\n\n\n## Type Mapping\n\n - Number\n - Boolean\n - String\n - null\n - Object\n - undefined\n - Date\n - Array\n - Buffer\n\n### JSON to Oracle Types\n\n* String|JSON|Text|default: VARCHAR2, default length is 1024\n* Number: NUMBER\n* Date: DATE\n* Timestamp: TIMESTAMP(3)\n* Boolean: CHAR(1)\n\n### Oracle Types to JSON\n\n* CHAR(1): Boolean\n* CHAR(n), VARCHAR, VARCHAR2, LONG VARCHAR, NCHAR, NVARCHAR2: String\n* LONG, BLOB, CLOB, NCLOB: Buffer\n* NUMBER, INTEGER, DECIMAL, DOUBLE, FLOAT, BIGINT, SMALLINT, REAL, NUMERIC, BINARY_FLOAT, BINARY_DOUBLE, UROWID, ROWID: Number\n* DATE, TIMESTAMP: Date\n* default: String\n\n## Destroying Models\n\nDestroying models may result in errors due to foreign key integrity. Make sure to delete any related models first before calling delete on model's with relationships.\n\n## Auto Migrate / Auto Update\n\nAfter making changes to your model properties you must call `Model.automigrate()` or `Model.autoupdate()`. Only call `Model.automigrate()` on new models\nas it will drop existing tables.\n\nLoopBack Oracle connector creates the following schema objects for a given model:\n\n* A table, for example, PRODUCT\n* A sequence for the primary key, for example, PRODUCT_ID_SEQUENCE\n* A trigger to generate the primary key from the sequnce, for example, PRODUCT_ID_TRIGGER\n\n\n## Running examples\n\n* example/app.js: Demonstrate the asynchronous discovery\n* example/app-sync.js: Demonstrate the synchronous discovery\n\n## Running tests\n\n    npm test",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-connector-oracle/issues"
  },
  "_id": "loopback-connector-oracle@1.1.0",
  "dist": {
    "shasum": "655635ecc30defedde4cff109fb3c2ebbd6dc284"
  },
  "_from": "loopback-connector-oracle@~1.1.0",
  "_resolved": "https://registry.npmjs.org/loopback-connector-oracle/-/loopback-connector-oracle-1.1.0.tgz"
}
